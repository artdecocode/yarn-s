#!/usr/bin/env node
'use strict';
const child_process = require('child_process');
const stream = require('stream');
const os = require('os');             const t=(a,b,c,e=!1,d=!1)=>{const h=c?new RegExp(`^-(${c}|-${b})`):new RegExp(`^--${b}`);b=a.findIndex(g=>h.test(g));if(-1==b)return{argv:a};if(e)return{value:!0,argv:[...a.slice(0,b),...a.slice(b+1)]};e=b+1;c=a[e];if(!c||"string"==typeof c&&c.startsWith("--"))return{argv:a};d&&(c=parseInt(c,10));return{value:c,argv:[...a.slice(0,b),...a.slice(e+1)]}},u=a=>{const b=[];for(let c=0;c<a.length;c++){const e=a[c];if(e.startsWith("-"))break;b.push(e)}return b},w=()=>{var a=v;return Object.keys(a).reduce((b,
c)=>{const e=a[c];if("string"==typeof e)return b[`-${e}`]="",b;c=e.command?c:`--${c}`;e.short&&(c=`${c}, -${e.short}`);let d=e.description;e.default&&(d=`${d}\nDefault: ${e.default}.`);b[c]=d;return b},{})};const v={scripts:{description:"The scripts to execute in series.",command:!0,multiple:!0},help:{description:"Print the help information and exit.",boolean:!0,short:"h"},version:{description:"Show the version's number and exit.",boolean:!0,short:"v"}},x=function(a={},b=process.argv){[,,...b]=b;const c=u(b);b=b.slice(c.length);let e=!c.length;return Object.keys(a).reduce(({a:d,...h},g)=>{if(0==d.length&&e)return{a:d,...h};const m=a[g];let l;if("string"==typeof m)({value:l,argv:d}=t(d,g,m));else try{const {short:f,
boolean:k,number:n,command:p,multiple:q}=m;p&&q&&c.length?(l=c,e=!0):p&&c.length?(l=c[0],e=!0):{value:l,argv:d}=t(d,g,f,k,n)}catch(f){return{a:d,...h}}return void 0===l?{a:d,...h}:{a:d,...h,[g]:l}},{a:b})}(v),y=x.scripts,z=x.help,A=x.version;function B(){var a={description:"Run Multiple Yarn Commands In Series.",example:"yarn-s script-1 script-2",line:"yarn-s script[,script,...]",usage:w()};const {usage:b={},description:c,line:e,example:d}=a;a=Object.keys(b);const h=Object.values(b),[g]=a.reduce(([f=0,k=0],n)=>{const p=b[n].split("\n").reduce((q,r)=>r.length>q?r.length:q,0);p>k&&(k=p);n.length>f&&(f=n.length);return[f,k]},[]),m=(f,k)=>{k=" ".repeat(k-f.length);return`${f}${k}`};a=a.reduce((f,k,n)=>{n=h[n].split("\n");k=m(k,g);const [p,
...q]=n;k=`${k}\t${p}`;const r=m("",g);n=q.map(J=>`${r}\t${J}`);return[...f,k,...n]},[]).map(f=>`\t${f}`);const l=[c,`  ${e||""}`].filter(f=>f?f.trim():f).join("\n\n");a=`${l?`${l}\n`:""}
${a.join("\n")}
`;return d?`${a}
  Example:

    ${d}
`:a};/*
 diff package https://github.com/kpdecker/jsdiff
 BSD License
 Copyright (c) 2009-2015, Kevin Decker <kpdecker@gmail.com>
*/
const C={black:30,red:31,green:32,yellow:33,blue:34,magenta:35,cyan:36,white:37,grey:90};function D(a,b){return(b=C[b])?`\x1b[${b}m${a}\x1b[0m`:a};const {spawn:E}=child_process;const {Writable:F}=stream;const G=(a,b=0,c=!1)=>{if(0===b&&!c)return a;a=a.split("\n",c?b+1:void 0);return c?a[a.length-1]:a.slice(b).join("\n")},H=(a,b=!1)=>G(a,2+(b?1:0)),I=a=>{({callee:{caller:a}}=a);return a};const {homedir:K}=os;const L=/\s+at.*(?:\(|\s)(.*)\)?/,M=/^(?:(?:(?:node|(?:internal\/[\w/]*|.*node_modules\/(?:IGNORED_MODULES)\/.*)?\w+)\.js:\d+:\d+)|native)/,N=K(),O=a=>{const {pretty:b=!1,ignoredModules:c=["pirates"]}={},e=new RegExp(M.source.replace("IGNORED_MODULES",c.join("|")));return a.replace(/\\/g,"/").split("\n").filter(d=>{d=d.match(L);if(null===d||!d[1])return!0;d=d[1];return d.includes(".app/Contents/Resources/electron.asar")||d.includes(".app/Contents/Resources/default_app.asar")?!1:!e.test(d)}).filter(d=>
d.trim()).map(d=>b?d.replace(L,(h,g)=>h.replace(g,g.replace(N,"~"))):d).join("\n")};function P(a,b,c=!1){return function(e){var d=I(arguments),{stack:h}=Error();const g=G(h,2,!0),m=(h=e instanceof Error)?e.message:e;d=[`Error: ${m}`,...null!==d&&a===d||c?[b]:[g,b]].join("\n");d=O(d);return Object.assign(h?e:Error(),{message:m,stack:d})}};function Q(a){var {stack:b}=Error();const c=I(arguments);b=H(b,a);return P(c,b,a)};const R=(a,b)=>{b.once("error",c=>{a.emit("error",c)});return b};class S extends F{constructor(a){const {binary:b=!1,rs:c=null,...e}=a||{},{f:d=Q(!0),proxyError:h}=a||{},g=(m,l)=>d(l);super(e);this.b=[];this.c=new Promise((m,l)=>{this.on("finish",()=>{let f;b?f=Buffer.concat(this.b):f=this.b.join("");m(f);this.b=[]});this.once("error",f=>{if(-1==f.stack.indexOf("\n"))g`${f}`;else{const k=O(f.stack);f.stack=k;h&&g`${f}`}l(f)});c&&R(this,c).pipe(this)})}_write(a,b,c){this.b.push(a);c()}get promise(){return this.c}}
const T=async a=>{({promise:a}=new S({rs:a,f:Q(!0)}));return await a};const U=async a=>{const [b,c,e]=await Promise.all([new Promise((d,h)=>{a.on("error",h).on("exit",g=>{d(g)})}),a.stdout?T(a.stdout):void 0,a.stderr?T(a.stderr):void 0]);return{code:b,stdout:c,stderr:e}};async function V(){var a={scripts:y};if(!a)throw Error("Config is expected");({scripts:a=[]}=a);return await a.reduce(async(b,c)=>{b=await b;var e=E("yarn",[c],{stdio:"inherit"});var d=U(e);e.promise=d;e.spawnCommand=e.spawnargs.join(" ");({promise:d}=e);e={g:e,promise:d};({promise:e}=e);d=await e;({code:e}=d);if(e)throw b=Error(`Command "${D(c,"yellow")}" existed with code ${D(e,"red")}`),b.code=e,b;return[...b,d]},[])};if(z){const a=B();console.log(a);process.exit(0)}else A&&(console.log(require("../../package.json").version),process.exit(0));(async()=>{try{if(!y||!y.length)throw Error("Please pass at least one command.");await V()}catch(a){process.env.DEBUG?console.error(a.stack):console.log(a.message),process.exit(a.code)}})();
